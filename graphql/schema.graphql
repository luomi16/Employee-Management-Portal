### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String
  id: String
  state: String
  streetName: String
  zip: String
}

input AddressInput {
  city: String
  state: String
  streetName: String
  zip: String
}

type Document {
  documentType: DocumentType
  feedback: String
  fileName: String
  fileUrl: String
  id: String
  status: Status
}

input DocumentInput {
  fileName: String
  fileUrl: String
}

enum DocumentType {
  I_20
  I_983
  OPT_EAD
  OPT_RECEIPT
}

type EmergencyContact {
  email: String
  firstName: String
  id: String
  lastName: String
  middleName: String
  phone: String
  relationship: String
}

input EmergencyContactInput {
  email: String
  firstName: String
  lastName: String
  middleName: String
  phone: String
  relationship: String
}

type Employee {
  address: Address
  birthday: String
  createdAt: String
  documents: [Document]
  email: String
  emergencyContacts: [EmergencyContact]
  firstName: String
  gender: Gender
  id: String
  identity: Identity
  lastName: String
  middleName: String
  onboardingStatus: String
  phone: String
  prefferedName: String
  reference: [Reference]
  ssn: String
  updatedAt: String
  userId: String
  workAuthorization: WorkAuthorization
}

enum Gender {
  FEMALE
  MALE
  NOTTOANSWER
}

enum Identity {
  CITIZEN
  GREENCARD
  OTHER
}

type Mutation {
  addWorkAuthorization(employeeId: String, endDate: String, startDate: String, visaType: String): WorkAuthorization
  createEmployee(address: AddressInput, birthday: String, documents: [DocumentInput], email: String, emergencyContacts: [EmergencyContactInput], firstName: String, gender: Gender, identity: Identity, lastName: String, middleName: String, phone: String, prefferedName: String, reference: [ReferenceInput], ssn: String, userId: String, workAuthorization: WorkAuthorizationInput): Employee
  createUser(email: String, image: String, password: String, username: String): User
  sendRegistrationToken(email: String, name: String): RegistrationToken
  signIn(email: String, password: String): User
  updateEmployee(data: String, id: String): Employee
  uploadDocument(documentType: String, employeeId: String, fileName: String, fileUrl: String): Document
}

type Query {
  employeeById(id: String): Employee
  employeeByUserId(userId: String): Employee
  employeeDocuments(employeeId: String): [Document]
  employees: [Employee]
  registrationTokenHistory: [RegistrationToken]
  userById(id: String): User
  users: [User]
}

type Reference {
  email: String
  firstName: String
  id: String
  lastName: String
  middleName: String
  phone: String
  relationship: String
}

input ReferenceInput {
  email: String
  firstName: String
  lastName: String
  middleName: String
  phone: String
  relationship: String
}

type RegistrationToken {
  createdAt: String
  email: String
  id: ID
  isOnboarded: Boolean
  name: String
  token: String
  tokenExpiration: String
}

enum Status {
  APPROVED
  PENDING
  REJECTED
}

type User {
  createdAt: String
  email: String
  id: String
  image: String
  updatedAt: String
  username: String
}

type WorkAuthorization {
  documents: [Document]
  endDate: String
  id: String
  startDate: String
  visaType: String
}

input WorkAuthorizationInput {
  documents: [DocumentInput]
  endDate: String
  startDate: String
  visaType: String
}