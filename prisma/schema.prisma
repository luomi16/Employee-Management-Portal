
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model User {
//   id            String         @id @default(auto()) @map("_id") @db.ObjectId
//   username      String
//   email         String         @unique
//   password      String
//   image         String?
//   accounts      Account[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
 
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  email         String         @unique
  password      String
  image         String?

  role          Role           @default(EMPLOYEE)// Enum: 'HR' or 'EMPLOYEE'

  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee Employee[]
}


model Employee {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  firstName     String
  lastName      String
  department    String
  position      String
  startDate     DateTime

  onboardingStatus OnboardingStatus // Enum: 'PENDING', 'COMPLETED'
  documents    Document[]           // Reference to uploaded documents
  hrRecords    HRRecord[]           // HR-related records and notes

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Document {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String     @db.ObjectId
  fileName    String
  fileUrl     String     // Reference to file location (e.g., S3, server)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model HRRecord {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String     @db.ObjectId
  note        String     // HR-related notes about the employee
  status      OnboardingStatus

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
// Enum definitions
enum Role {
  HR
  EMPLOYEE
}

enum OnboardingStatus {
  PENDING
  COMPLETED
  REJECTED
}