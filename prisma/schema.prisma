generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email    String  @unique
  password String
  image    String?

  role Role @default(EMPLOYEE) // Enum: 'HR' or 'EMPLOYEE'

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Employee Employee[]
}

model Employee {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String  @db.ObjectId
  firstName     String
  lastName      String
  middleName    String?
  prefferedName String?
  profilePic    String?

  address Address[]
  phone   PhoneNumber[] // Embedding phone details (cell/work)

  ssn      String
  birthday DateTime
  gender   Gender

  identity          Identity
  workAuthorization WorkAuthorization?

  emergencyContacts EmergencyContact[] // Multiple emergency contacts
  reference         Reference? // Who referred the employee

  onboardingStatus OnboardingStatus // Enum: 'PENDING', 'COMPLETED', 'REJECTED','REJECTED'
  documents        Document[] // Reference to uploaded documents
  hrRecords        HRRecord[] // HR-related records and notes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  building   String?
  streetName String
  city       String
  state      String
  zip        String
  employeeId String   @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model PhoneNumber {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String?   @db.ObjectId
  cellPhone  String?
  workPhone  String?
  Employee   Employee? @relation(fields: [employeeId], references: [id])
}

model EmergencyContact {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String  @db.ObjectId
  firstName    String
  lastName     String
  middleName   String?
  phone        String
  email        String
  relationship String

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Reference {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  employeeId   String  @unique @db.ObjectId
  firstName    String
  lastName     String
  middleName   String?
  phone        String
  email        String
  relationship String

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model WorkAuthorization {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String     @unique @db.ObjectId
  visaType   VisaType // Enum for different visa types like H1B, F1, etc.
  startDate  DateTime?
  endDate    DateTime?
  document   Document[] // List of work authorization related documents

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Document {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String @db.ObjectId
  fileName   String
  fileUrl    String // Reference to file location (e.g., S3, server)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee            Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  workAuthorizationId String?  @db.ObjectId
  WorkAuthorization WorkAuthorization? @relation(fields: [workAuthorizationId], references: [id])
}

model HRRecord {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String           @db.ObjectId
  note       String // HR-related notes about the employee
  status     OnboardingStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Enum definitions
enum Role {
  HR
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  NOTTOANSWER
}

enum OnboardingStatus {
  PENDING
  COMPLETED
  REJECTED
}

enum Identity {
  CITIZEN
  GREENCARD
  OTHER
}

enum VisaType {
  H1B
  L2
  F1
  H4
  OTHER
}
